{"meta":{"title":"FLWLW","subtitle":null,"description":null,"author":"FLWLW","url":"http://yoursite.com"},"pages":[{"title":"404","date":"2018-07-23T23:57:10.000Z","updated":"2018-07-23T23:57:10.754Z","comments":true,"path":"404/index.html","permalink":"http://yoursite.com/404/index.html","excerpt":"","text":""},{"title":"about","date":"2018-07-24T01:22:21.000Z","updated":"2018-07-24T01:22:21.631Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-07-23T23:57:39.000Z","updated":"2018-07-23T23:57:39.681Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2018-07-23T23:57:01.000Z","updated":"2018-07-23T23:57:01.799Z","comments":true,"path":"search/index.html","permalink":"http://yoursite.com/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-23T23:57:24.000Z","updated":"2018-07-23T23:57:24.155Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"分治初解","slug":"分治","date":"2018-07-24T03:03:09.369Z","updated":"2018-07-24T03:12:40.559Z","comments":true,"path":"2018/07/24/分治/","link":"","permalink":"http://yoursite.com/2018/07/24/分治/","excerpt":"","text":"分治是一种基于二分的解题思路分治字面理解即为分开治理以题目最大子段和为例子(题目：最大子段和)(PS：请先看题)题目样例：72 -4 3 -1 2 -4 3用分治思想来看我们需要先把这个数列二分一下得到：2 -4 3 -1 和 2 -4 3接着分别从两个新数列的开头向后走第一个数列从-1开始向左走，每次更新最大值（左边情况）第二个数列从2开始向右走（右边情况）将第一个数列和第二个数列的最大值加起来得到中间向两边找的情况，且必定为最优的可能答案（想想为什么） 代码实现： 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;#define ll long long//把long long 用 ll 代替 using namespace std;const int INF = 0x7fffffff;//设定最大值，应为有负数 ll a[1000001], ans = -INF, n;void zdh(ll l, ll r) &#123; if(l &gt;= r) return; ll m = l + (r -l) / 2;//二分 zdh(l, m);//递归左边 zdh(m + 1, r);//递归右边 ll a1 = 0, a2 = 0, ans1 = -INF, ans2 = -INF;//a1, a2求和， ans1, ans2更新答案 for(int i = m; i &gt;= l; i --) &#123;//向左找 a1 += a[i];//加起来 ans1 = max(a1, ans1);//更新 ans = max(ans, ans1);//更新最后答案 &#125; for(int j = m + 1; j &lt;= r; j ++) &#123;//向右找 a2 += a[j]; ans2 = max(a2, ans2); ans = max(ans, ans2); &#125; ans = max(ans1 + ans2, ans);//更新中间情况 &#125;int main() &#123; cin &gt;&gt; n; for(int i = 1; i &lt;= n; i ++) &#123; cin &gt;&gt; a[i]; &#125; zdh(1, n); cout &lt;&lt; ans ; return 0;&#125;","categories":[],"tags":[{"name":"分治","slug":"分治","permalink":"http://yoursite.com/tags/分治/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-07-21T07:16:05.774Z","updated":"2018-07-24T00:55:39.729Z","comments":true,"path":"2018/07/21/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}